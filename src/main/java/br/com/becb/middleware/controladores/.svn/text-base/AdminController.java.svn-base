package br.com.becb.middleware.controladores;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import br.com.becb.middlewarerecarga.entidades.Produto;
import br.com.becb.middlewarerecarga.exceptions.ErroException;
import br.com.becb.middlewarerecarga.servicos.AdicionarProdutosService;
import br.com.becb.middlewarerecarga.servicos.ErroService;
import br.com.becb.middlewarerecarga.servicos.ListaProdutosService;
import br.com.becb.middlewarerecarga.servicos.Logar;
import br.com.becb.middlewarerecarga.servicos.RecarregarService;
import br.com.becb.middlewarerecarga.servicos.UserService;
import br.com.becb.middlewarerecarga.suporte.Suporte;

@Controller
public class AdminController {

	@Autowired
	AdicionarProdutosService adicionarProdutoService;

	@Autowired
	ListaProdutosService listaProdutosService;

	@Autowired
	RecarregarService recarregarService;

	@Autowired(required = true)
	private HttpServletRequest request;

	@Autowired
	private UserService userService;

	@Autowired
	private ErroService erroService;
	
	
	
	
	
	@SuppressWarnings("finally")
	@RequestMapping("/admin/atualizarProdutos")
	public ModelAndView atualizarProdutos() {

		Suporte.resetSuportValues();
		ModelAndView resultado = new ModelAndView();

		// if (null == AdicionarProdutosService.atualizacao ||
		// AdicionarProdutosService.atualizacao.getDay() != (new
		// Date()).getDay())
		try {
			
			String str = adicionarProdutoService.adicionarProdutos();
			
			
			resultado.addObject("status", str.replace("\n", "<br>"));

			resultado.addObject("mensagem", "Produtos sendo atualizado");
			
		} catch (ErroException e) {
			e.getErro().setMensagem(
					"Erro ao listar recarga. \n" + e.getErro().getMensagem());
			resultado.addObject("erro", e);
			resultado.setViewName("erroRecarga");

		} finally {
			resultado.setViewName("resultadoAtualizacao");

			return resultado;
		}

	}
	
	
	@SuppressWarnings("finally")
	@RequestMapping(value = "/admin/buscarProdutos")
	public ModelAndView buscarRecargasDisponiveis(
			@RequestParam(required = false, value = "ddd") String ddd) {

		List<Produto> produtos = null;
		ModelAndView resultado = new ModelAndView();

		try {
			if(ddd==null || ddd=="")
				produtos = listaProdutosService.listarTodosProdutos();			
			else
				produtos = listaProdutosService.buscarProdutos(ddd, null);
			
			
			
			Produto p;
			if(null != produtos){
				System.out.println("Quantidade de Total de Produto "+produtos.size());
				
				for(int i=0;i < produtos.size(); i++){
				
					p = produtos.get(i);
					if(!p.isAtivo() ){
						p = produtos.get(i);
						System.out.println("Retirado: "+p.getOperadora().getNomeOperadora()+" "+p.getValorMaximoProduto());
						produtos.remove(i);
					}
				}
				System.out.println("Quantidade de Produtos Ativos: "+produtos.size());
				
			}

			Logar.info("Total de Produtos para o DDD: "+ddd+ " Total: "+produtos.size());
			resultado.addObject("produtos", produtos);
			resultado.setViewName("produtos");
		
		} catch (ErroException e) {
			e.getErro().setMensagem("Erro ao Buscar recargas disponíveis. \n"+e.getErro().getMensagem());
			resultado.addObject("erro", e);
			resultado.setViewName("erroRecarga");
			
		}finally{
			return resultado;
		}
	}	
	
	
}
