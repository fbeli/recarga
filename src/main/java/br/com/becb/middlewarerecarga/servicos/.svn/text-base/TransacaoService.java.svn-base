package br.com.becb.middlewarerecarga.servicos;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import br.com.becb.middlewarerecarga.dao.hibernate.HibernateRecarga;
import br.com.becb.middlewarerecarga.entidades.Recarga;
import br.com.becb.middlewarerecarga.entidades.StatusRecargaServer;
import br.com.becb.middlewarerecarga.entidades.Transacoes;
import br.com.becb.middlewarerecarga.entidades.rv.jax.ConversoesRV;
import br.com.becb.middlewarerecarga.entidades.rv.recarga.jax.CellCardStatusTransacao;
import br.com.becb.middlewarerecarga.exceptions.ErroException;
import br.com.becb.middlewarerecarga.servicos.cliente.rv.ParseRecarga;

@Component("transacaoService")
public class TransacaoService {

	@Autowired
	ParseRecarga parseRecarga;

	@Autowired
	ConsultaRV consultaRV;

	@Autowired
	HibernateRecarga<Recarga> hDaoRecarga;

	/**
	 * Pega a lista de transações pendentes cancela as transações pendentes não
	 * completadas
	 */
	public void confirmaTransacao() {

	}
/**
 * busca transações pendentes
 * @return lista de transações pendentes
 * @throws ErroException
 */
	public List<Recarga> buscaTransacoesPendentes() throws ErroException {
		List<Recarga> recargasPendentes = new ArrayList<Recarga>();

		// criar por interceptor
		List<NameValuePair> params = new ArrayList<NameValuePair>(2);

		// params.add(new BasicNameValuePair("codigo_transacao", ""));
		params.add(new BasicNameValuePair("dataConsulta", ConversoesRV
				.converterDataRV(new Date(), "YYYYMMdd")));

		String xml = consultaRV.fazerConsulta(params);
		CellCardStatusTransacao cell = parseRecarga.parserStatusTransacao(xml);

		return recargasPendentes;
	}

	/**
	 * Busca status de uma transação  no sistema RV
	 * 
	 * @param cod_online
	 *            código da recarga no sistema RV
	 * 
	 * @return
	 * @throws ErroException
	 */
	public String buscaStatusTransacao_CodOnline(String cod_online)
			throws ErroException {

		CellCardStatusTransacao cell = null;
		// criar por interceptor
		List<NameValuePair> params = new ArrayList<NameValuePair>(2);

		params.add(new BasicNameValuePair("cod_online", cod_online));

		
		for(int i=0;i<params.size();i++){
			Logar.info(params.get(i).getName()+" - "+params.get(i).getValue());
		}
		String xml = consultaRV.fazerConsulta(params);
		Logar.info("**********");
		Logar.info("XML de retorno para busca de recarga do codOnline: "+cod_online);
		Logar.info(xml);

		if(xml.length() > 1)
			cell = parseRecarga.parserStatusTransacao(xml);

		
		if (cell == null)
			return null;
		
		return cell.getStatus();
	}

	public List<Recarga> buscaStatusTransacao_idRecarga(String compra) {
		List<Recarga> recargasPendentes = new ArrayList<Recarga>();

		// criar por interceptor
		List<NameValuePair> params = new ArrayList<NameValuePair>(2);

		params.add(new BasicNameValuePair("compra", compra));

		String xml = consultaRV.fazerConsulta(params);

		return recargasPendentes;
	}

	public Recarga ajustarStatusTransacao(Recarga recarga) throws ErroException {

		String status = buscaStatusTransacao_CodOnline(recarga.getCodOnline());

		recarga = this.ajustaStatusRecargaServer(recarga, status);
		if (recarga.getStatusRecargaServer() != null)
			hDaoRecarga.merge(recarga);

		return recarga;
	}

	private Recarga ajustaStatusRecargaServer(Recarga recarga, String status) {

		switch (status) {
		case "00":
			recarga.setStatusRecargaServer(StatusRecargaServer.CONFIRMADO);
			break;
		case "01":
			recarga.setStatusRecargaServer(StatusRecargaServer.INEXISTENTE);
			break;
		case "02":
			recarga.setStatusRecargaServer(StatusRecargaServer.PENDENTE);
			break;
		case "03":
			recarga.setStatusRecargaServer(StatusRecargaServer.ESTORNADA);
			break;

		}
		return recarga;
	}

	public List<Recarga> getRecargaPorFone(String ddd, String fone)
			throws ErroException {

		List<Recarga> recargas = hDaoRecarga.getRecargaPorFone(ddd, fone);

		List<Recarga> recargasReturn = new ArrayList<Recarga>();

		Recarga recarga;
		for (int i = 0; i < recargas.size(); i++) {
			recarga = recargas.get(i);
			if (recarga.getStatusRecargaServer() == null
					&& recarga.getCodOnline() != null) {
				String status = this.buscaStatusTransacao_CodOnline(recargas
						.get(i).getCodOnline());

				recarga = this.ajustaStatusRecargaServer(recarga, status);

				if (recarga.getStatusRecargaServer() != null)
					hDaoRecarga.merge(recarga);
			}

			recargasReturn.add(recarga);
		}

		return recargasReturn;
	}

	public List<Recarga> getRecargaPorPin() throws ErroException {
		List<Recarga> recargas = hDaoRecarga.getRecargaPin();
		List<Recarga> recargasReturn = new ArrayList<Recarga>();

		Recarga recarga;
		for (int i = 0; i < recargas.size(); i++) {
			recarga = recargas.get(i);
			if (recarga.getStatusRecargaServer() == null
					&& recarga.getCodOnline() != null) {
				String status = this.buscaStatusTransacao_CodOnline(recargas
						.get(i).getCodOnline());

				recarga = this.ajustaStatusRecargaServer(recarga, status);

				if (recarga.getStatusRecargaServer() != null)
					hDaoRecarga.merge(recarga);
			}

			recargasReturn.add(recarga);
		}

		return recargasReturn;
	}

	public Transacoes getRecargaPorUserEData(String usuario, Date dataInicio,
			Date dataFim) throws ErroException {

		List<Recarga> recargas = hDaoRecarga.getRecargaPorUserEData(usuario,
				dataInicio, dataFim);

		// FIX confirmar as recargas
		return confirmarRecargas(recargas);

	}

	@SuppressWarnings("deprecation")
	public Transacoes getRecargaPorUserNaData(String usuario,
			Date dataDePesquisa) throws ErroException {

		Date dataFim = pegaDiaSeguinte(dataDePesquisa);

		List<Recarga> recargas = hDaoRecarga.getRecargaPorUserEData(usuario,
				dataDePesquisa, dataFim);

		// FIX confirmar as recargas
		return confirmarRecargas(recargas);

	}

	@SuppressWarnings("deprecation")
	private Date pegaDiaSeguinte(Date dataDePesquisa) {

		Calendar cDataDePesquisa = Calendar.getInstance();
		cDataDePesquisa.setTime(dataDePesquisa);

		int ano = dataDePesquisa.getYear();
		int mes = dataDePesquisa.getMonth();
		int dia = dataDePesquisa.getDate();

		switch (dia) {
		case 31:
			if (mes == 0 || mes == 2 || mes == 4 || mes == 6 || mes == 7
					|| mes == 9) {
				dia = 01;
				mes = mes + 1;
			} else if (mes == 11) {
				mes = 00;
				dia = 01;
				ano = ano + 1;
			}
			break;
		case 30:

			if (mes == 3 || mes == 5 || mes == 8 || mes == 10) {
				dia = 01;
				mes = mes + 1;
			} else
				dia = dia + 1;
			break;

		case 28:
			if (mes == 1) {
				dia = 01;
				mes = 02;
			}
			break;
		default:
			dia = dia + 1;
		}
		@SuppressWarnings("deprecation")
		Date dataFim = new Date(ano, mes, dia);
		return dataFim;
	}

	@SuppressWarnings("unused")
	private Transacoes confirmarRecargas(List<Recarga> recargas)
			throws ErroException {
		Recarga recarga;
		List<Recarga> recargaOnline = new ArrayList<Recarga>();
		List<Recarga> recargaPin = new ArrayList<Recarga>();
		List<Recarga> recargaNaoConfirmada = new ArrayList<Recarga>();
		Transacoes transacoes = new Transacoes();

		for (int i = 0; i < recargas.size(); i++) {
			recarga = recargas.get(i);
			if ((recarga.getStatusRecargaServer() == null || !recarga
					.confimado()) && recarga.getCodOnline() != null) {
				String status = this.buscaStatusTransacao_CodOnline(recarga.getCodOnline());

				if (status != null) {
					recarga = this.ajustaStatusRecargaServer(recarga, status);

					if (recarga.getStatusRecargaServer() != null)
						hDaoRecarga.merge(recarga);
				}
			}

			if (recarga.confimado()) {
				transacoes.addTotal(recarga.getValor());

				if (null == recarga.getPin()) {
					recargaOnline.add(recarga);
					transacoes.addTotalOnline(recarga.getValor());
				} else {
					recargaPin.add(recarga);
					transacoes.addTotalPin(recarga.getValor());
				}
			}else{
				recargaNaoConfirmada.add(recarga);
			}

		}

		transacoes.setRecargasOnline(recargaOnline);
		transacoes.setRecargasPin(recargaPin);
		transacoes.setRecargasNaoConfirmadas(recargaNaoConfirmada);

		return transacoes;
	}

}